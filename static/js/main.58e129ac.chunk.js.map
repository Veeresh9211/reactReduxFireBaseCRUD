{"version":3,"sources":["components/songDetails/songDetails.js","config/config.js","store/actions/songAction.js","components/loader/dataLoader.js","components/listSong/listsong.js","components/addSong/addSong.js","components/updateSong/updateSong.js","components/dashboard/dashboard.js","components/layout/navbar.js","App.js","serviceWorker.js","store/reducers/songreducer.js","store/reducers/rootreducer.js","index.js","logo.svg"],"names":["SongDetails","props","className","song","id","name","filmName","singer","year","to","pathname","state","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","firestore","DataLoader","type","color","height","width","secondaryColor","style","left","position","top","React","Component","ListSong","this","GetSongData","dataLoader","loaderVal","songs","songDetail","length","map","key","connect","songR","loader","dispatch","collection","get","then","querySnapshot","data","docs","doc","payload","AddSong","handleChange","e","setState","currentTarget","value","preventDefault","saveDataRef","newStatusRef","$","modal","onSubmit","saveSong","bind","onChange","placeholder","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","newStatus","record","songRecord","set","catch","error","console","SaveSongData","UpdateSong","location","employee_name","content","employee_salary","author","employee_age","updateSongRef","updateStatusRef","updateSong","readOnly","updateStatus","axios","put","response","status","UpdateSongData","DashBoard","navBar","class","data-toggle","data-target","aria-controls","aria-expanded","App","exact","path","component","Dashboard","Boolean","window","hostname","match","initialState","songReducer","action","rootReducer","combineReducers","SongReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.58e129ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst SongDetails =(props)=>{\r\n    return(\r\n        <div className=\" row postDataList\">\r\n            <div className=\"col-md-2\">\r\n                {props.song.id}\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                {props.song.name}\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                {props.song.filmName}\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                {props.song.singer}\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                {props.song.year}\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n                <button>Delete</button>\r\n                \r\n                <Link to={{pathname: `/updateSong/${props.song.id}`,state: props.song}} className=\"nav-link\">Update Song</Link>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongDetails;","import firebase from 'firebase';\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDkcXPXkws0txAZvaP6FMfHYlPhesKKhTY\",\r\n    authDomain: \"reactreduxtodoexample.firebaseapp.com\",\r\n    databaseURL: \"https://reactreduxtodoexample.firebaseio.com\",\r\n    projectId: \"reactreduxtodoexample\",\r\n    storageBucket: \"reactreduxtodoexample.appspot.com\",\r\n    messagingSenderId: \"155968295519\",\r\n    appId: \"1:155968295519:web:fb54ab97fe78f5844101ea\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import axios from 'axios';\r\nimport firebase from '../../config/config';\r\nconst dbRef = firebase.firestore();\r\nexport const GetSongData =()=>{\r\n    return (dispatch)=>{\r\n        dispatch({type:'BEGIN_API'});\r\n        dbRef.collection(\"songs\").get().then((querySnapshot) => {\r\n            const data = querySnapshot.docs.map(doc => ({...doc.data(),id: doc.id}));\r\n            dispatch({type: 'GET_SONG_DATA',payload: data});\r\n        });\r\n    }\r\n}\r\n\r\nexport const SaveSongData =(data)=>{\r\n    let songRecord =  {\r\n        \"name\": data.name,\r\n        \"filmName\": data.filmName,\r\n        \"singer\": data.singer,\r\n        \"year\":data.year\r\n     }\r\n    return (dispatch)=>{\r\n        dispatch({type:'BEGIN_API'});\r\n        debugger\r\n        dbRef.collection(\"songs\").doc().set(songRecord)\r\n        .then(function() {\r\n            dispatch({type: 'SAVE_SONG_DATA',payload: \"SUCCESS\"});\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    }\r\n}\r\n\r\nexport const UpdateSongData =(data)=>{\r\n    let record =  {\r\n        \"name\": data.name,\r\n        \"salary\": data.content,\r\n        \"age\": data.author\r\n     }\r\n    return (dispatch)=>{\r\n        dispatch({type:'BEGIN_API'})\r\n        axios.put(`http://dummy.restapiexample.com/api/v1/update/${data.id}`,record)\r\n        .then(function (response) {\r\n            debugger;\r\n           dispatch({type: 'UPDATE_SONG_DATA',payload: response.status});\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport Loader from 'react-loader-spinner'\r\nclass DataLoader extends React.Component {\r\n  //other logic\r\n    render() {\r\n     return(\r\n      <Loader\r\n         type=\"Bars\"\r\n         color=\"#00BFFF\"\r\n         height={50}\r\n         width={50} \r\n         secondaryColor=\"grey\"\r\n         style={{left: \"50%\", position: \"absolute\", top:\"30%\"}}\r\n      />\r\n     );\r\n    }\r\n }\r\n\r\n export default DataLoader;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport SongDetails from '../songDetails/songDetails';\r\nimport {GetSongData} from '../../store/actions/songAction';\r\nimport DataLoader from '../loader/dataLoader';\r\nclass ListSong extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.GetSongData()\r\n    }\r\n    render(){\r\n        let dataLoader = this.props.loaderVal ? <DataLoader/> : \"\";\r\n        let {songs} =this.props;\r\n        let songDetail = songs.length > 0 && songs.map((song)=>{\r\n            return <SongDetails song={song} key={song.id}/>\r\n        })\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row postHeader\">\r\n                    <div className=\"col-md-2\">\r\n                        Id\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Song Name\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        Film Name\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Singer\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        Year\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        Actions\r\n                    </div>\r\n                </div>\r\n                {dataLoader}\r\n                {songDetail}\r\n            </div>\r\n        )\r\n      \r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    debugger\r\n    return{\r\n        songs: state.songR.songs,\r\n        loaderVal: state.songR.loader\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{GetSongData})(ListSong);","import React from 'react';\r\nimport {SaveSongData} from '../../store/actions/songAction';\r\nimport DataLoader from '../loader/dataLoader';\r\nimport {connect} from 'react-redux';\r\nimport $ from 'jquery';\r\n\r\nclass AddSong extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({[e.currentTarget.id]: e.currentTarget.value})\r\n    }\r\n\r\n    saveSong(e){\r\n        e.preventDefault();\r\n        this.props.saveDataRef(this.state)\r\n\r\n    }\r\n    render(){\r\n        let dataLoader = this.props.loaderVal ? <DataLoader/> : \"\";\r\n        if(this.props.newStatusRef == 'SUCCESS'){\r\n            $(\"#newSuccessModal\").modal();\r\n        }\r\n        return(\r\n            <div className=\"container formAlignment\">\r\n                <h3>New Song</h3>\r\n                <form onSubmit={this.saveSong.bind(this)}>\r\n                    <div className=\"form-group\">\r\n                        <label >Song Name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"name\" onChange={this.handleChange} placeholder=\"Enter Song Name\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Film Name</label>\r\n                        <textarea className=\"form-control\" id=\"filmName\" onChange={this.handleChange} placeholder=\"Enter Film Name\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Singer</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"singer\" onChange={this.handleChange} placeholder=\"Enter Singer\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Year</label>\r\n                        <input type=\"number\" className=\"form-control\" id=\"year\" onChange={this.handleChange} placeholder=\"Enter Year\"/>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Save Record</button>\r\n                </form>\r\n                {dataLoader}\r\n\r\n                <div className=\"modal fade\" id=\"newSuccessModal\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Notification</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            Record Successfully Created.\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    debugger\r\n    return{\r\n        newStatusRef: state.songR.newStatus,\r\n        loaderVal: state.songR.loader\r\n    }\r\n}\r\n\r\nconst dispatchActionToProps = (dispatch)=>{\r\n    return{\r\n        saveDataRef: (record)=> dispatch(SaveSongData(record))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,dispatchActionToProps)(AddSong);","import React from 'react';\r\n// import {SaveSongData} from '../../store/actions/songAction';\r\nimport DataLoader from '../loader/dataLoader';\r\nimport {connect} from 'react-redux';\r\nimport { UpdateSongData } from '../../store/actions/songAction';\r\nimport $ from 'jquery';\r\n\r\n\r\nclass UpdateSong extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        debugger\r\n        this.state={\r\n            id: this.props.location.state.id,\r\n            name: this.props.location.state.employee_name,\r\n            content: this.props.location.state.employee_salary,\r\n            author: this.props.location.state.employee_age,\r\n\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        debugger\r\n        this.setState({[e.currentTarget.id]: e.currentTarget.value})\r\n    }\r\n\r\n    updateSong(e){\r\n        debugger\r\n        e.preventDefault();\r\n        this.props.updateSongRef(this.state)\r\n\r\n    }\r\n\r\n    render(){\r\n        let dataLoader = this.props.loaderVal ? <DataLoader/> : \"\";\r\n        debugger\r\n        if(this.props.updateStatusRef == 200){\r\n            $(\"#updateSuccessModal\").modal();\r\n        }\r\n        return(\r\n\r\n            <div className=\"container formAlignment\">\r\n                <h3>Update Record</h3>\r\n                {this.props.updateStatusRef}\r\n                <form onSubmit={this.updateSong.bind(this)}>\r\n                <div className=\"form-group\">\r\n                        <label >Id</label>\r\n                        <input type=\"text\" value={this.state.id} className=\"form-control\" id=\"id\" onChange={this.handleChange} readOnly/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label >Name</label>\r\n                        <input type=\"text\" value={this.state.name} className=\"form-control\" id=\"name\" onChange={this.handleChange} placeholder=\"Enter Name\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Content</label>\r\n                        <textarea value={this.state.content} className=\"form-control\" id=\"content\" onChange={this.handleChange} placeholder=\"Enter Content\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Author</label>\r\n                        <input value={this.state.author} type=\"text\" className=\"form-control\" id=\"author\" onChange={this.handleChange} placeholder=\"Enter Author\"/>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Update Record</button>\r\n                </form>\r\n                {dataLoader}\r\n\r\n                <div className=\"modal fade\" id=\"updateSuccessModal\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Notification</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            Record Successfully Update.\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    debugger\r\n    return{\r\n        updateStatusRef: state.songR.updateStatus,\r\n        loaderVal: state.songR.loader\r\n    }\r\n}\r\n\r\n\r\nconst dispatcActionToProps = (dispatch) =>{\r\n    return{\r\n        updateSongRef: (record)=> dispatch(UpdateSongData(record))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,dispatcActionToProps)(UpdateSong);","import React,{Component} from 'react';\r\nclass DashBoard extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        debugger\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                Dashboard\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nconst navBar=()=>{\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <h3 className=\"nav-item active\">\r\n            <Link to=\"/\" className=\"nav-link\">Redux TODO</Link>\r\n          </h3>           \r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n              <Link to=\"/listSong\" className=\"nav-link\">List Song</Link>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n              <Link to=\"/addSong\" className=\"nav-link\">Add Song</Link>\r\n            </li>    \r\n          </ul>\r\n          </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default navBar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport ListSong from './components/listSong/listsong';\nimport AddSong from './components/addSong/addSong';\nimport UpdateSong from './components/updateSong/updateSong';\nimport Dashboard from './components/dashboard/dashboard';\nimport Navbar from './components/layout/navbar';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"app\">\n      <Navbar/>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard}/>\n        <Route path=\"/listSong\" component={ListSong}/>\n        <Route path=\"/addSong\" component={AddSong}/>\n        <Route path=\"/updateSong/:id\" component={UpdateSong}/>   \n      </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState={\r\n    songs: [],\r\n    newStatus: \"\",\r\n    loader: false,\r\n    updateStatus: \"\"\r\n}\r\nconst songReducer =(state=initialState, action)=>{\r\n    debugger\r\n    switch(action.type){\r\n        case 'GET_SONG_DATA':\r\n            return {\r\n                ...state,\r\n                songs: action.payload,\r\n                loader: false\r\n            }\r\n        break;\r\n        case 'SAVE_SONG_DATA':\r\n            return {\r\n                ...state,\r\n                newStatus: action.payload,\r\n                loader: false\r\n            }\r\n        break;\r\n        case 'UPDATE_SONG_DATA':\r\n            return {\r\n                ...state,\r\n                updateStatus: action.payload,\r\n                loader: false\r\n            }\r\n        break;\r\n        case 'BEGIN_API':\r\n            return {\r\n                ...state,\r\n                loader: true\r\n            }\r\n        break;\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default songReducer;","import {combineReducers} from 'redux';\r\nimport SongReducer from './songreducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    songR: SongReducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport rootReducer from './store/reducers/rootreducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}